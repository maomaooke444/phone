using GSMModemReader.API.ViewModels.Message;
using GSMModemReader.API.ViewModels.Sim;
using GSMModemReader.API.ViewModels.UserService;
using GSMModemReader.GUI.Global;
using GSMModemReader.GUI.Properties;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GSMModemReader.GUI.Page
{
    public partial class MainPage : UserControl, IDisposable
    {
        private MainForm _MainForm = null;
        private int _UserId;
        private string _DefaultPortListPath = "PortList.txt";
        //private string _LogPath = "log.txt";
        //private int _LogId = 0;
        private string _DefaultCounntry = "or";
        private DataTable _Countries = null;
        private DataTable _Services = null;
        private DataTable _Messages = null;
        private Dictionary<DataRow, Device> _Devices = new();
        private bool _StopCheck = false;

        private int _CountryId = -1;
        public int CountryId
        {
            get => _CountryId;
            set
            {
                if (_CountryId == value) return;
                _CountryId = value;

                if (cbCounties.DropDownItems.Count > 0)
                {
                    foreach (ToolStripMenuItem item in cbCounties.DropDownItems)
                    {
                        if (_CountryId.Equals(item.Tag))
                        {
                            item.Image = Resources.check_mark;
                            cbCounties.Text = item.Text;
                        }
                        else
                        {
                            item.Image = null;
                        }
                    }
                }
                else
                {
                    cbCounties.Text = "*更新*";
                }
            }
        }

        private int _ThreadCount = 10;
        private static Regex _RegCode4 = new(@"\d{4}");
        private static Random _Rand = new(Guid.NewGuid().GetHashCode());
        public MainPage(MainForm mainform, int userId, string userName)
        {
            InitializeComponent();
            DoubleBuffered = true;
            Grid1.AutoGenerateColumns = false;
            Grid2.AutoGenerateColumns = false;
            _Messages = new DataTable();
            _Messages.Columns.Add("SimId");
            _Messages.Columns.Add("PhoneNumber");
            _Messages.Columns.Add("Message");
            _Messages.Columns.Add("State");
            _Messages.Columns.Add("ErrorMessage");
            _Messages.Columns.Add("Color");
            Grid2.DataSource = _Messages;
            txtThreadCount.Text = _ThreadCount.ToString();

            _MainForm = mainform;
            _UserId = userId;
            lbUserName.Text = $"帳號: {userName}";


            openFileDialog1.FileName = _DefaultPortListPath;
            LoadCountries();
            LoadServices();
            LoadPortList(_DefaultPortListPath);

            Thread thread = new(CheckUploadQueue);
            thread.Start();
        }

        private bool LoadPortList(string path)
        {
            try
            {
                if (!File.Exists(path))
                {
                    throw new Exception("Port檔路徑不存在，請重新選取");
                }

                foreach (Device device in _Devices.Values)
                {
                    device.SerialPort.Close();
                    device.SerialPort.Dispose();
                }
                _Devices.Clear();

                DataTable gridSource = new();
                gridSource.Columns.Add("PortNumber");
                gridSource.Columns.Add("PhoneNumber");
                gridSource.Columns.Add("Country");
                gridSource.Columns.Add("State");
                gridSource.Columns.Add("Color");

                HashSet<int> hsAdded = new();
                foreach (string line in File.ReadAllLines(path))
                {
                    if (int.TryParse(line, out int portNo) && !hsAdded.Contains(portNo))
                    {
                        DataRow row = gridSource.Rows.Add("COM" + portNo, "", 0, "", "");
                        SerialPort port = new()
                        {
                            PortName = "COM" + portNo,
                            BaudRate = 115200,
                            Parity = Parity.None,
                            DataBits = 8,
                            StopBits = StopBits.One,
                            Handshake = Handshake.None,
                            NewLine = Environment.NewLine,
                            WriteTimeout = 1000
                        };
                        _Devices.Add(row, new Device()
                        {
                            DataRow = row,
                            SerialPort = port,
                            PortNumber = portNo
                        });
                        hsAdded.Add(portNo);
                    }
                }
                gridSource.DefaultView.RowFilter = "Color<>'S'";
                Grid1.DataSource = gridSource;
                btnPortList.Text = Path.GetFileName(path);
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                Grid1.DataSource = null;
                btnPortList.Text = "*請選取*";
                return false;
            }
        }

        private async void LoadCountries()
        {
            cbCounties.Enabled = false;
            cbCounties.DropDownItems.Clear();
            contextMenuStrip1.Items.Clear();
            _Countries = await API_GetCounntries();
            _Countries.PrimaryKey = new DataColumn[] { _Countries.Columns["Id"] };

            int countryId = 0;
            if (_Countries != null)
            {
                foreach (DataRow row in _Countries.Rows)
                {
                    cbCounties.DropDownItems.Add(new ToolStripMenuItem(row["Code"] as string) { Tag = row["Id"] });
                    contextMenuStrip1.Items.Add(new ToolStripMenuItem(row["Code"] as string) { Tag = row["Id"] });
                    if (_DefaultCounntry.Equals(row["Code"]))
                    {
                        countryId = Convert.ToInt32(row["Id"]);
                    }
                }
            }
            CountryId = countryId;
            cbCounties.Enabled = true;
        }

        private async void LoadServices()
        {
            cbServices.Enabled = false;
            cbServices.DropDownItems.Clear();
            _Services = await API_GetUserServices(_UserId);
            _Services.PrimaryKey = new DataColumn[] { _Services.Columns["Id"] };

            if (_Services != null)
            {
                foreach (DataRow row in _Services.Rows)
                {
                    cbServices.DropDownItems.Add(new ToolStripMenuItem(row["Code"] as string)
                    {
                        Image = (bool)row["Enabled"] ? Resources.check_mark : null,
                        Tag = row["Id"]
                    });
                }
            }
            cbServices.Enabled = true;
        }

        public async void CheckUploadQueue()
        {
            List<DataRow> removeRow = new();
            while (true)
            {
                foreach (DataRow row in _Messages.Rows)
                {
                    this.Invoke(() =>
                    {
                        row["State"] = "上傳中...";
                        row["Color"] = "Y";
                    });
                    int simId = Convert.ToInt32(row["SimId"]);
                    string message = row["Message"].ToString();
                    (bool succ, string error) = await API_MessageCreate(simId, message);
                    if (succ)
                    {
                        this.Invoke(() =>
                        {
                            row["State"] = "上傳完成";
                            row["Color"] = "G";
                        });
                        removeRow.Add(row);
                    }
                    else
                    {
                        this.Invoke(() =>
                        {
                            row["State"] = $"上傳失敗 ({error})";
                            row["Color"] = "R";
                        });
                    }
                }
                this.Invoke(() =>
                {
                    foreach (DataRow row in removeRow)
                    {
                        _Messages.Rows.Remove(row);
                    }
                });
                removeRow.Clear();
                await Task.Delay(1000);
            }
        }

        private async Task CheckDevice(Device device)
        {
            try
            {
                this.Invoke(() =>
                {
                    device.DataRow["State"] = "檢查中";
                    device.DataRow["Color"] = "Y";
                });

                device.SerialPort.Open();
                device.SerialPort.WriteLine("AT+COPS?");
                await Task.Delay(1000);

                string code = null;
                string response = device.SerialPort.ReadExisting();
                //lock (_LogPath)
                //{
                //    File.AppendAllText(_LogPath, $"{device.PortNumber}:AT+COPS?:{response}\r\n");
                //}
                if (response.Contains("AIS"))
                {
                    code = "545";
                }
                else if (response.Contains("True"))
                {
                    code = "833";
                }

                if (code != null)
                {
                    device.SerialPort.WriteLine($"AT+CUSD=1,\"*{code}#\",15");
                    await Task.Delay(10000);
                    response = device.SerialPort.ReadExisting();
                    //lock (_LogPath)
                    //{
                    //    File.AppendAllText(_LogPath, $"{device.PortNumber}:AT+CUSD=1,\"*{code}#\",15:{response}\r\n");
                    //}
                    if (response.Contains("OK"))
                    {
                        string phoneNumber = null;
                        if (response.Contains("TrueMove"))
                        {
                            phoneNumber = response.Split(':')[1].Split(',')[1].Replace("\"", "");
                        }
                        else
                        {
                            string[] parts = response.Split(',');
                            if (parts.Length >= 2)
                            {
                                string hexString = parts[parts.Length - 2].Replace("\"", "");
                                phoneNumber = DecodeHex(hexString).Split(':').FirstOrDefault();
                            }
                        }

                        phoneNumber = phoneNumber.Trim();
                        if (phoneNumber.Length > 10)
                        {
                            phoneNumber = phoneNumber.Substring(phoneNumber.Length - 10, 10);
                        }

                        device.PhoneNumber = phoneNumber;
                        if (string.IsNullOrWhiteSpace(phoneNumber))
                        {
                            device.Retry = true;
                            throw new Exception("獲取號碼失敗");
                        }

                        device.Retry = false;
                        this.Invoke(() =>
                        {
                            device.DataRow["PhoneNumber"] = phoneNumber;
                            device.DataRow["Country"] = 0;
                        });

                        for (int i = 0; i < 3; i++)
                        {
                            (bool succ, string error, int simId, int countryId) = await API_SimCreate(_UserId, _CountryId, phoneNumber);
                            if (succ)
                            {
                                device.SimId = simId;
                                this.Invoke(() =>
                                {
                                    device.DataRow["Country"] = countryId;
                                    device.DataRow["State"] = "可使用";
                                    device.DataRow["Color"] = "G";
                                });
                                break;
                            }
                            if (i == 2)
                            {
                                throw new Exception(error);
                            }
                        }
                    }
                    else
                    {
                        device.Retry = true;
                        throw new Exception("獲取號碼失敗");
                    }
                }
                else
                {
                    device.SimId = 0;
                    device.PhoneNumber = "";
                    this.Invoke(() =>
                    {
                        device.DataRow["PhoneNumber"] = "無SIM卡";
                        device.DataRow["State"] = " -- ";
                        device.DataRow["Country"] = 0;
                        device.DataRow["Color"] = "R";
                    });
                }
            }
            catch (FileNotFoundException)
            {
                this.Invoke(() =>
                {
                    device.DataRow["State"] = $" -- ";
                    device.DataRow["Country"] = 0;
                    device.DataRow["Color"] = "S";
                });
            }
            catch (Exception ex)
            {
                this.Invoke(() =>
                {
                    device.DataRow["State"] = $"錯誤: {ex.Message}";
                    device.DataRow["Country"] = 0;
                    device.DataRow["Color"] = "R";
                });
            }
            finally
            {
                device.SerialPort.Close();
            }
        }

        private async Task ReadSMS(Device device)
        {
            try
            {
                this.Invoke(() =>
                {
                    device.DataRow["State"] = "檢查中";
                    device.DataRow["Color"] = "Y";
                });

                device.SerialPort.Open();
                device.SerialPort.WriteLine("AT+CMGF=1"); // Set mode to Text(1) or PDU(0)
                await Task.Delay(1000);
                //device.SerialPort.WriteLine("AT+CPMS=\"SM\""); // Set storage to SIM(SM)
                //await Task.Run(() => { Thread.Sleep(1000); });
                device.SerialPort.WriteLine("AT+CMGL=\"REC UNREAD\"");
                await Task.Delay(1000);
                string response = device.SerialPort.ReadExisting();
                //_LogId += 1;
                //lock (_LogPath)
                //{
                //    File.AppendAllText(_LogPath, $"{device.PortNumber},{_LogId}:AT+CMGL=\"REC UNREAD\":{response}\r\n");
                //}
                //Debug.Write(response);
                if (!string.IsNullOrWhiteSpace(response.Replace("OK", "").Replace("\r", "").Replace("\n", "")) && !response.Contains("ERROR"))
                {
                    string[] hexStrings = response.Replace("OK", "").Replace("\r", "").Replace("\n", "").Replace("\\", "").Split(',').LastOrDefault().Split('\"');
                    string hexString = hexStrings[^1];
                    string textMessage = DecodeHex(hexString).Split('\"').LastOrDefault();
                    if (string.IsNullOrWhiteSpace(textMessage)) textMessage = hexString;
                    if (!string.IsNullOrWhiteSpace(textMessage))
                    {
                        (bool succ, string error) = await API_MessageCreate(device.SimId, textMessage);
                        if (succ)
                        {
                            this.Invoke(() =>
                            {
                                device.DataRow["State"] = "新訊息";
                                device.DataRow["Color"] = "G";
                            });
                        }
                        else
                        {
                            throw new Exception($"{ error }");
                        }
                    }
                    else
                    {
                        this.Invoke(() =>
                        {
                            device.DataRow["State"] = "完成";
                            device.DataRow["Color"] = "G";
                        });
                    }
                }
                else
                {
                    this.Invoke(() =>
                    {
                        device.DataRow["State"] = "完成";
                        device.DataRow["Color"] = "G";
                    });
                }
            }
            catch (Exception ex)
            {
                this.Invoke(() =>
                {
                    device.DataRow["State"] = $"錯誤: {ex.Message}";
                    device.DataRow["Color"] = "R";
                });
            }
            finally
            {
                device.SerialPort.Close();
            }
        }

        public static string DecodeHex(string hexString)
        {
            string result = "";
            try
            {
                for (int i = 0; i < hexString.Length; i += 4)
                {
                    result += Encoding.Unicode.GetString(BitConverter.GetBytes(Convert.ToInt16(hexString.Substring(i, 4), 16)));
                }
            }
            catch { }
            return result;

            //string ascii = string.Empty;

            //try
            //{
            //    for (int i = 0; i < hexString.Length; i += 2)
            //    {
            //        String hs = string.Empty;

            //        hs = hexString.Substring(i, 2);
            //        uint decval = System.Convert.ToUInt32(hs, 16);
            //        char character = System.Convert.ToChar(decval);
            //        ascii += character;
            //    }
            //}
            //catch (Exception ex) { }

            //return ascii;
        }

        private void btnPortList_Click(object sender, EventArgs e)
        {
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                LoadPortList(openFileDialog1.FileName);
            }
        }

        private void cbCounties_DropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            CountryId = Convert.ToInt32(e.ClickedItem.Tag);
        }

        private void cbCounties_Click(object sender, EventArgs e)
        {
            if (_Countries == null)
            {
                LoadCountries();
            }
        }

        private async void cbServices_DropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            _MainForm.LockScreen("設定中");
            try
            {
                int id = (int)e.ClickedItem.Tag;
                bool succ;
                string error;
                if ((bool)_Services.Rows.Find(id)["Enabled"])
                {
                    (succ, error) = await API_DisableService(_UserId, id);
                }
                else
                {
                    (succ, error) = await API_EnableService(_UserId, id);
                }

                if (succ)
                {
                    LoadServices();
                }
                else
                {
                    MessageBox.Show(error);
                }
            }
            catch { }
            finally
            {
                _MainForm.UnlockScreen();
            }
        }

        private void cbServices_Click(object sender, EventArgs e)
        {
            if (_Services == null)
            {
                LoadServices();
            }
        }

        private static async Task<DataTable> API_GetCounntries()
        {
            try
            {
                using HttpClient client = new();
                HttpResponseMessage response = await client.GetAsync(Configuration.APIUrl_GetCounntries);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                DataTable res = new();
                res.Columns.Add("Id", typeof(int));
                res.Columns.Add("Name");
                res.Columns.Add("Code");
                foreach (var item in result["data"] as JArray)
                {
                    res.Rows.Add(Convert.ToInt32(item["id"].ToString()), item["name"].ToString(), item["code"].ToString());
                }
                return res;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return null;
            }
        }

        private static async Task<DataTable> API_GetUserServices(int userId)
        {
            try
            {
                using HttpClient client = new();
                HttpResponseMessage response = await client.GetAsync($"{Configuration.APIUrl_GetUserServices}?userId={userId}");
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                DataTable res = new();
                res.Columns.Add("Id", typeof(int));
                res.Columns.Add("Name");
                res.Columns.Add("Code");
                res.Columns.Add("Enabled", typeof(bool));
                foreach (var item in result["data"] as JArray)
                {
                    res.Rows.Add(Convert.ToInt32(item["id"].ToString()), item["name"].ToString(), item["code"].ToString(), (bool)item["enabled"]);
                }
                return res;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return null;
            }
        }

        /// <summary>
        /// Call API/UserService/EnableService, return (IsSucc,Error)
        /// </summary>
        private static async Task<(bool, string)> API_EnableService(int userId, int serviceId)
        {
            try
            {
                EnableDisableUserServiceVM body = new()
                {
                    UserId = userId,
                    ServiceId = serviceId
                };
                string jsonMessage = JsonConvert.SerializeObject(body);
                using HttpClient client = new();
                StringContent content = new(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(Configuration.APIUrl_EnableService, content);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                return (true, null);
            }
            catch (Exception ex)
            {
                return (false, ex.Message);
            }
        }

        /// <summary>
        /// Call API/UserService/DisableService, return (IsSucc,Error)
        /// </summary>
        private static async Task<(bool, string)> API_DisableService(int userId, int serviceId)
        {
            try
            {
                EnableDisableUserServiceVM body = new()
                {
                    UserId = userId,
                    ServiceId = serviceId
                };
                string jsonMessage = JsonConvert.SerializeObject(body);
                using HttpClient client = new();
                StringContent content = new(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(Configuration.APIUrl_DisableService, content);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                return (true, null);
            }
            catch (Exception ex)
            {
                return (false, ex.Message);
            }
        }

        /// <summary>
        /// Call API/Sim/Inactive, return (IsSucc,Error,SimId,CounntryId)
        /// </summary>
        private static async Task<(bool, string)> API_SimInactive(int userId)
        {
            try
            {
                InactiveSimMV body = new()
                {
                    UserId = userId
                };
                string jsonMessage = JsonConvert.SerializeObject(body);
                using HttpClient client = new();
                StringContent content = new(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(Configuration.APIUrl_SimInactive, content);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                return (true, null);
            }
            catch (Exception ex)
            {
                return (false, ex.Message);
            }
        }


        /// <summary>
        /// Call API/Sim/Create, return (IsSucc,Error,SimId,CounntryId)
        /// </summary>
        private static async Task<(bool, string, int, int)> API_SimCreate(int userId, int countryId, string simNumber)
        {
            try
            {
                CreateSimMV body = new()
                {
                    UserId = userId,
                    CountryId = countryId,
                    SimNumber = simNumber,
                };
                string jsonMessage = JsonConvert.SerializeObject(body);
                using HttpClient client = new();
                StringContent content = new(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(Configuration.APIUrl_SimCreate, content);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                int simId = Convert.ToInt32(result.SelectToken("data.id").ToString());
                countryId = Convert.ToInt32(result.SelectToken("data.countryId").ToString());
                return (true, null, simId, countryId);
            }
            catch (Exception ex)
            {
                return (false, ex.Message, 0, 0);
            }
        }

        /// <summary>
        /// Call API/Sim/Edit, return (IsSucc,Error,SimId,CounntryId)
        /// </summary>
        private static async Task<(bool, string, int, int)> API_SimEdit(int id, int countryId)
        {
            try
            {
                EditSimMV body = new()
                {
                    Id = id,
                    CountryId = countryId,
                };
                string jsonMessage = JsonConvert.SerializeObject(body);
                using HttpClient client = new();
                StringContent content = new(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(Configuration.APIUrl_SimEdit, content);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                int simId = Convert.ToInt32(result.SelectToken("data.id").ToString());
                countryId = Convert.ToInt32(result.SelectToken("data.countryId").ToString());
                return (true, null, simId, countryId);
            }
            catch (Exception ex)
            {
                return (false, ex.Message, 0, 0);
            }
        }

        /// <summary>
        /// Call API/Message/Create, return (IsSucc,Error)
        /// </summary>
        private static async Task<(bool, string)> API_MessageCreate(int simId, string message)
        {
            try
            {
                CreateMessageMV body = new()
                {
                    SimId = simId,
                    TextMessage = message
                };
                string jsonMessage = JsonConvert.SerializeObject(body);
                using HttpClient client = new();
                StringContent content = new(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(Configuration.APIUrl_MessageCreate, content);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<JObject>(responseContent);
                if (result["code"].ToString() != "0000")
                {
                    throw new Exception(result.GetValue("message").ToString());
                }
                return (true, null);
            }
            catch (Exception ex)
            {
                return (false, ex.Message);
            }
        }

        private void Grid1_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            DataView rows = (Grid1.DataSource as DataTable).DefaultView;
            for (int i = 0; i < rows.Count; i++)
            {
                switch (rows[i]["Color"])
                {
                    case "R":
                        Grid1.Rows[i].Cells["Grid_State"].Style.BackColor = Color.Pink;
                        break;
                    case "G":
                        Grid1.Rows[i].Cells["Grid_State"].Style.BackColor = Color.LightGreen;
                        break;
                    case "Y":
                        Grid1.Rows[i].Cells["Grid_State"].Style.BackColor = Color.Yellow;
                        break;
                    case "S":
                        Grid1.Rows[i].Cells["Grid_State"].Style.BackColor = Color.Silver;
                        break;
                    default:
                        Grid1.Rows[i].Cells["Grid_State"].Style.BackColor = Color.Empty;
                        break;
                }
            }
        }

        private void Grid2_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            DataView rows = (Grid2.DataSource as DataTable).DefaultView;
            for (int i = 0; i < rows.Count; i++)
            {
                switch (rows[i]["Color"])
                {
                    case "R":
                        Grid2.Rows[i].Cells["Grid2_State"].Style.BackColor = Color.Pink;
                        break;
                    case "G":
                        Grid2.Rows[i].Cells["Grid2_State"].Style.BackColor = Color.LightGreen;
                        break;
                    case "Y":
                        Grid2.Rows[i].Cells["Grid2_State"].Style.BackColor = Color.Yellow;
                        break;
                    default:
                        Grid2.Rows[i].Cells["Grid2_State"].Style.BackColor = Color.Empty;
                        break;
                }
            }
        }

        private void btnStartCheck_Click(object sender, EventArgs e)
        {
            if (_Devices.Count == 0)
            {
                MessageBox.Show("無效的埠號表");
                return;
            }

            if (_Countries == null || _Countries.Rows.Count == 0)
            {
                MessageBox.Show("無國別資料");
                return;
            }

            if (_CountryId <= 0)
            {
                MessageBox.Show("無效的預設國別");
                return;
            }

            _StopCheck = false;
            btnSendAT.Enabled = false;
            btnStartCheck.Enabled = false;
            btnPortList.Enabled = false;
            txtThreadCount.Enabled = false;
            btnStopCheck.Enabled = true;
            Thread thread = new(async () =>
            {
                await API_SimInactive(_UserId);

                List<Task> tasks = new();
                foreach (var device in _Devices.Values)
                {
                    if (_StopCheck) break;
                    tasks.Add(CheckDevice(device));
                    if (tasks.Count >= _ThreadCount)
                    {
                        await Task.WhenAll(tasks);
                        tasks.Clear();
                    }
                }
                await Task.WhenAll(tasks);
                tasks.Clear();

                while (!_StopCheck)
                {
                    foreach (var device in _Devices.Values)
                    {
                        if (_StopCheck) break;
                        if (device.SimId == 0)
                        {
                            if (device.Retry)
                            {
                                tasks.Add(CheckDevice(device));
                            }
                            else
                            {
                                continue;
                            }
                        }
                        else
                        {
                            tasks.Add(ReadSMS(device));
                        }
                        if (tasks.Count >= _ThreadCount)
                        {
                            await Task.WhenAll(tasks);
                            tasks.Clear();
                        }
                    }
                    await Task.WhenAll(tasks);
                    tasks.Clear();
                    await Task.Delay(1000);
                }


                this.Invoke(() =>
                {
                    foreach (var device in _Devices.Values)
                    {
                        device.SimId = 0;
                        device.PhoneNumber = "";
                        device.Retry = false;
                        device.DataRow["PhoneNumber"] = "";
                        device.DataRow["State"] = "";
                        device.DataRow["Country"] = 0;
                        device.DataRow["Color"] = "";
                    }
                    btnSendAT.Enabled = true;
                    btnStartCheck.Enabled = true;
                    btnPortList.Enabled = true;
                    txtThreadCount.Enabled = true;
                });
            });
            thread.Start();
        }

        private void btnStopCheck_Click(object sender, EventArgs e)
        {
            _StopCheck = true;
            btnStopCheck.Enabled = false;
        }

        private void Grid1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0) return;
            if (e.ColumnIndex != 2) return;
            if (_Countries == null || _Countries.Rows.Count == 0) return;


            DataRow row = (Grid1.DataSource as DataTable).DefaultView[e.RowIndex].Row;
            if (string.IsNullOrWhiteSpace(row["PhoneNumber"] as string)) return;

            int countryId = Convert.ToInt32(row["Country"]);
            foreach (ToolStripMenuItem item in contextMenuStrip1.Items)
            {
                if (countryId.Equals(item.Tag))
                {
                    item.Image = Resources.check_mark;
                }
                else
                {
                    item.Image = null;
                }
            }
            contextMenuStrip1.Tag = row;
            contextMenuStrip1.Show(Cursor.Position);
        }

        private void Grid1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0) return;
            if (e.ColumnIndex != 2) return;
            e.Value = _Countries?.Rows.Find(Convert.ToInt32(e.Value))?["Code"].ToString() ?? "";
        }

        private async void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (contextMenuStrip1.Tag is DataRow row)
            {
                int simId = _Devices[row].SimId;
                (bool succ, _, _, int countryId) = await API_SimEdit(simId, Convert.ToInt32(e.ClickedItem.Tag));
                if (succ)
                {
                    this.Invoke(() =>
                    {
                        row["Country"] = countryId;
                    });
                }
            }
        }

        private class Device
        {
            public int PortNumber { get; set; }
            public int SimId { get; set; }
            public string PhoneNumber { get; set; }
            public SerialPort SerialPort { get; set; }
            public DataRow DataRow { get; set; }
            public bool Retry { get; set; }
        }

        private void txtThreadCount_Validating(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (int.TryParse(txtThreadCount.Text, out int value))
            {
                _ThreadCount = Math.Min(100, Math.Max(1, value));
            }
            txtThreadCount.Text = _ThreadCount.ToString();
        }

        public async Task Close()
        {
            btnStopCheck_Click(null, null);
            while (!btnStartCheck.Enabled)
            {
                await Task.Delay(100);
            }
            await API_SimInactive(_UserId);
        }

        private void btnSendAT_Click(object sender, EventArgs e)
        {
            using SendATForm form = new();
            form.ShowDialog();
        }
    }
}
